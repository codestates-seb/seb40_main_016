spring:
  jpa:
    properties:
      hibernate:
      ddl-auto: create
      auto_quote_keyword: true
    show_sql: true
  mail:
    host: smtp.gmail.com
    port: 587
    username: sanguk821@gmail.com
    password: ${SMTP_PASS}
    properties:
      mail:
        smtp:
          auth: true
          starttls:
            enable: true
  servlet:
    multipart:
      max-file-size: 10MB
      max-request-size: 30MB
  security:
    oauth2:
      client:
        registration:
          google:
            clientId: ${GOOGLE_OAUTH_CLIENT_ID}
            clientSecret: ${GOOGLE_OAUTH_SECRET}
            redirect-uri: ${GOOGLE_OAUTH_REDIRECT}
            scope:
              - email
              - profile
  kafka:
    bootstrap-servers: localhost:9092
    consumer:
      # consumer bootstrap servers가 따로 존재하면 설정
      enable-auto-commit: true
      max-poll-records: 1000

      # bootstrap-servers: 192.168.0.4:9092
      # 식별 가능한 Consumer Group Id
      group-id: oingdaddy
      # Kafka 서버에 초기 offset이 없거나, 서버에 현재 offset이 더 이상 존재하지 않을 경우 수행할 작업을 설정
      # latest: 가장 최근에 생산된 메시지로 offeset reset
      # earliest: 가장 오래된 메시지로 offeset reset
      # none: offset 정보가 없으면 Exception 발생
      auto-offset-reset: latest
      # 데이터를 받아올 때, key/value를 역직렬화
      # JSON 데이터를 받아올 것이라면 JsonDeserializer
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.apache.kafka.common.serialization.StringDeserializer
    producer:
      # producer bootstrap servers가 따로 존재하면 설정
      # bootstrap-servers: 3.34.97.97:9092

      # 데이터를 보낼 때, key/value를 직렬화
      # JSON 데이터를 보낼 것이라면 JsonDeserializer
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.apache.kafka.common.serialization.StringSerializer
    template:
      default-topic: oingdaddy
mail:
  address:
    admin: admin@gmail.com
jwt:
  key:
    secret: ${JWT_SECRET_KEY}
  access-token-expiration-minutes: 1000000
  refresh-token-expiration-minutes: 420
cloud:
  aws:
    credentials:
      accessKey: ${s3_access_key}
      secretKey: ${s3_secret_key}
    s3:
      bucket: catdogbucket
      folder:
    region:
      static: ap-northeast-2
    stack:
      auto: false

